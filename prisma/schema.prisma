// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "sqlite" // Or your chosen DB
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// --- Core User and Plan ---

model User {
  id             Int      @id @default(autoincrement())
  username       String
  profilePicture String?
  email          String   @unique
  password       String // Remember to hash passwords!
  balance        Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  travelPlans            TravelPlan[]
  payments               Payment[]
  travelTickets          TravelTicket[]
  lodgingTickets         LodgingTicket[]
  transportationTickets  TransportationTicket[]
  reviews                Review[]
  wishlistedDestinations TravelDestination[]    @relation("UserWishlistDestinations")
  wishlistedLodgings     Lodging[]              @relation("UserWishlistLodgings")
  Preferences            Preferences[]
}

model Preferences {
  id                  Int      @id @default(autoincrement())
  userId              Int
  transportationId    Int
  lodgingId           Int
  travelDestinationId Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user              User               @relation(fields: [userId], references: [id])
  transportation    Transportation     @relation(fields: [transportationId], references: [id])
  lodging           Lodging            @relation(fields: [lodgingId], references: [id])
  travelDestination TravelDestination? @relation(fields: [travelDestinationId], references: [id])
}

model TravelPlan {
  id         Int        @id @default(autoincrement())
  userId     Int
  name       String? // Optional name for the plan (e.g., "Bali Summer Trip")
  startDate  DateTime? // Overall plan start date
  endDate    DateTime? // Overall plan end date
  totalPrice Int // Consider Decimal if handling fractions or large sums
  status     StatusEnum @default(PENDING)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  user                  User                   @relation(fields: [userId], references: [id])
  transportationTickets TransportationTicket[]
  lodgingTickets        LodgingTicket[]
  travelTickets         TravelTicket[]
}

// --- Booking/Ticket Models ---

model TravelTicket {
  id                  Int        @id @default(autoincrement())
  userId              Int
  travelDestinationId Int // Renamed for clarity
  guestAmount         Int
  totalPrice          Int
  paymentId           Int
  visitDate           DateTime? // Specific date of visit, if applicable
  status              StatusEnum @default(PENDING)
  planId              Int? // Make optional? Or ensure every ticket belongs to a plan? Assume plan required for now.
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  // Relations
  user              User              @relation(fields: [userId], references: [id])
  travelDestination TravelDestination @relation(fields: [travelDestinationId], references: [id])
  plan              TravelPlan?       @relation(fields: [planId], references: [id]) // Link to plan
  payment           Payment?          @relation(fields: [paymentId], references: [id])
}

model LodgingTicket {
  id           Int        @id @default(autoincrement())
  userId       Int
  lodgingId    Int
  guestAmount  Int
  totalPrice   Int
  checkInDate  DateTime
  checkOutDate DateTime
  paymentId    Int
  status       StatusEnum @default(PENDING)
  planId       Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  user    User        @relation(fields: [userId], references: [id])
  lodging Lodging     @relation(fields: [lodgingId], references: [id])
  plan    TravelPlan? @relation(fields: [planId], references: [id]) // Link to plan
  payment Payment?    @relation(fields: [paymentId], references: [id])
}

model TransportationTicket {
  id                Int        @id @default(autoincrement())
  userId            Int
  transportationId  Int // Renamed for consistency
  passengerAmount   Int
  paymentId         Int
  totalPrice        Int
  departureDateTime DateTime // Specific departure for this ticket
  arrivalDateTime   DateTime // Specific arrival for this ticket
  status            StatusEnum @default(PENDING)
  planId            Int? // Assume plan required
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  // Relations
  user           User           @relation(fields: [userId], references: [id])
  transportation Transportation @relation(fields: [transportationId], references: [id])
  plan           TravelPlan?    @relation(fields: [planId], references: [id]) // Link to plan 
  payment        Payment?       @relation(fields: [paymentId], references: [id])
}

// --- Service Detail Models ---

model Transportation {
  id                  Int               @id @default(autoincrement())
  name                String // e.g., "Flight GA-123", "Express Train", "Local Bus 5A"
  description         String?
  company             String? // e.g., "Garuda Indonesia", "National Rail"
  pickupLocation      String // Keep as string for simplicity OR link to City/Location model
  destination         String // Keep as string for simplicity OR link to City/Location model
  // General schedule times (might be less relevant if tickets store specifics)
  pickupTime          DateTime?
  arrivalTime         DateTime?
  basePrice           Int // Price per passenger (can vary)
  type                TransportTypeEnum
  transportPictureUrl String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relations
  tickets     TransportationTicket[]
  // Potentially add tags/categories (e.g., "Budget", "Luxury", "Scenic Route")
  // categories          Category[]           @relation("TransportationCategories")
  Review      Review[]
  Preferences Preferences[]
}

model Lodging {
  id                Int      @id @default(autoincrement())
  name              String // e.g., "Grand Hyatt Bali"
  description       String?
  lodgingPictureUrl String?
  pricePerNight     Int // Base price, actual price in ticket might vary
  address           String // Full address
  city              String? // Consider linking to a City model
  country           String? // Consider linking to a Country model
  latitude          Float? // For map features / proximity search
  longitude         Float? // For map features / proximity search
  propertyType      String? // e.g., "Hotel", "Hostel", "Villa", "Apartment"
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  lodgingTickets LodgingTicket[]
  reviews        Review[]        @relation("LodgingReviews")
  categories     Category[]      @relation("LodgingCategories")
  wishlistedBy   User[]          @relation("UserWishlistLodgings")
  Preferences    Preferences[]
  Rooms          Rooms[]
}

model Rooms {
  id             Int        @id @default(autoincrement())
  lodgingId      Int
  name           String // e.g., "Deluxe Room", "Standard Room"
  description    String?
  price          Int
  capacity       Int
  status         RoomStatus
  roomPictureUrl String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  lodging Lodging @relation(fields: [lodgingId], references: [id])
}

enum RoomStatus {
  OCCUPIED
  AVAILABLE
}

model TravelDestination {
  id               Int      @id @default(autoincrement())
  name             String // e.g., "Ubud Monkey Forest"
  description      String?
  travelPictureUrl String?
  price            Int? // Entrance fee, null if free or variable
  address          String? // Physical address if applicable
  city             String? // Consider linking to a City model
  country          String? // Consider linking to a Country model
  latitude         Float?
  longitude        Float?
  openingHours     String? // e.g., "09:00-17:00"
  avg_rating       Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  travelTickets TravelTicket[]
  reviews       Review[]       @relation("DestinationReviews")
  categories    Category[]     @relation("DestinationCategories")
  wishlistedBy  User[]         @relation("UserWishlistDestinations")
  Preferences   Preferences[]
}

// --- Supporting Models (Recommendations, Reviews, Categories, Payment) ---

model Payment {
  id            Int      @id @default(autoincrement())
  paymentType   String // e.g., "virtual_account", "credit_card"
  bank          BankEnum // If applicable
  vaNumber      String? // If applicable
  amount        Int // Amount paid for this transaction
  paymentStatus String // e.g., "pending", "paid", "failed" (more specific than plan status)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  LodgingTicket        LodgingTicket[]
  TransportationTicket TransportationTicket[]
  TravelTicket         TravelTicket[]
  User                 User?                  @relation(fields: [userId], references: [id])
  userId               Int?
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  rating    Int // e.g., 1 to 5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Review Target (Choose ONE - Add more relations if needed for Transportation etc.)
  travelDestinationId Int?
  lodgingId           Int?
  transportationId    Int? // Can add later if needed

  // Relations
  user              User               @relation(fields: [userId], references: [id])
  travelDestination TravelDestination? @relation("DestinationReviews", fields: [travelDestinationId], references: [id])
  lodging           Lodging?           @relation("LodgingReviews", fields: [lodgingId], references: [id])
  transportation    Transportation?    @relation(fields: [transportationId], references: [id]) // Uncomment if adding
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique // e.g., "Beach", "History", "Adventure", "Nature", "Luxury", "Budget"

  // Relations (Many-to-Many)
  destinations TravelDestination[] @relation("DestinationCategories")
  lodgings     Lodging[]           @relation("LodgingCategories")
  // transportations Transportation[]    @relation("TransportationCategories") // Add if needed
}

// --- Enums ---

enum StatusEnum {
  PENDING // Initial state, awaiting payment or confirmation
  CONFIRMED // Booked and paid/confirmed
  CANCELLED // Cancelled by user or system
  COMPLETED // Trip/stay finished (optional, useful for triggering reviews)
}

enum TransportTypeEnum {
  BUS
  TRAIN
  FLIGHT
  CAR // Could be rental or ride-share
  FERRY
  OTHER
}

enum BankEnum {
  BCA
  MANDIRI
  BNI
  BRI
  OTHER // For non-listed banks or different payment methods
}
